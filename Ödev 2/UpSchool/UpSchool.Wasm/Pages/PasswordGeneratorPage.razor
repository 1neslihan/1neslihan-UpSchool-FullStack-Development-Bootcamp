@page "/passwordGenerator"
@page "/passwordGenerator/{PasswordLength:int}"
@using Blazored.Toast.Services;
@using Microsoft.JSInterop;
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Utilities
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3 class="text-center text-light">Password Generator Page</h3>

<div class="container">
    <div class="row justify-content-center text-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header">
                    <div class="card-title">
                        <h2 class="text-info">
                            Password Generator
                        </h2>

                    </div>

                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <p>@password</p>
                        </div>

                        <div class="col-md-1 ms-auto clickable">
                            <button type="button" @onclick="@(() => SavePasswordAsync())" class="oi oi-folder activeButton" aria-hidden="true"></button>
                        </div>

                        <div class="col-md-1 ms-auto clickable">
                            <button type="button" @onclick="@(() => CopyToClipBoardAsync())" class="oi oi-document activeButton" aria-hidden="true"></button>
                        </div>

                        <div class="col-md-1 ms-auto clickable">
                            <button type="button" @onclick=@GeneratePassword class="oi oi-loop-circular activeButton" aria-hidden="true"></button>
                        </div>

                        <div class="col-md-1 ms-auto">
                           @* "@($"col-md-1 ms-auto clickable {visibilityState}")">*@
                            <button type="button" @onclick="@(() => UndoPassword())" class="@($"oi oi-action-undo {visibilityState}")"></button> @*aria-hidden="true"*@
                        </div>
                    </div>

                </div>
                <div class="card-footer">
                    <hr class=@CssColourClass style="height: 2vh !important;" />
                </div>

            </div>
        </div>

    </div>

    <div class="row justify-content-center text-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-body">
                    <div class="mt-2 text-center">
                        <label>
                            Password Length <span class="@($"badge {GetCssColorClass(password.Length)}")">@generatePasswordDto.Length</span>
                        </label>

                        <input class="form-range" type="range"
                               value="@generatePasswordDto.Length" @oninput=@OnInputChange min="6" max="40" step="1" />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeNumbers"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "numbers"))" id="numbers" />
                        <label class="form-check-label" for="numbers">Numbers</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeLowercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "lowercaseChars"))" id="lowercaseChars" />
                        <label class="form-check-label" for="lowercaseChars">Lowercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeUppercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "uppercaseChars"))" id="uppercaseChars" />
                        <label class="form-check-label" for="uppercaseChars">Uppercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeSpecialCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "specialChars"))" id="specialChars" />
                        <label class="form-check-label" for="specialChars">Special Chars</label>
                    </div>
                </div>
            </div>
       </div>
    </div>
    <div class="row justify-content-center text-center">

        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header">
                    <div class="card-title text-success">
                        <h2>
                            Saved Passwords
                        </h2>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mt-2">
                        @if (savedPasswords.Any())
                        {
                            <ul class="list-group">
                                @foreach (var savedPassword in savedPasswords)
                                {
                                    <li @onclick="@(() => CopyToClipBoardAsync())" class="@($"list-group-item text-white clickable {GetCssColorClass(savedPassword.Length)}")"> @savedPassword</li>
                                }

                            </ul>
                        }
                        else
                        {
                            <div class="text-black-center">
                                <h5>There is no passwords here</h5>
                            </div>
                        }
                        <button class="btn btn-outline-danger mt-2" @onclick=@ClearSavedPassword>Clear</button>                     
                    </div>
                </div>
                <div class="card-footer">
                    <hr class=@CssColourClass style="height: 2vh !important " />
                </div>
            </div>
        </div>
    </div>
    


</div>

@code {

    [Parameter]
    public int? PasswordLength { get; set; }

    public PasswordGenerator passwordGenerator = new PasswordGenerator();

    public GeneratePasswordDto generatePasswordDto = new GeneratePasswordDto();

    public string password = string.Empty;

    public string CssColourClass = "bg-danger";

    //public string test;

    private List<string> savedPasswords;

    //Memento pattern kodları////////////////////////////////////////////////
    PasswordGeneratorCareTaker CareTaker = new PasswordGeneratorCareTaker();
    private List<string> storageForPasswords = new List<string>();
    public int tracker { get; set; } = -1;
    public string visibilityState { get; set; }

    /////////////////////////////////////////////////////////////////////////

    protected override async Task OnInitializedAsync()
    {
        savedPasswords = new List<string>();

        if (PasswordLength.HasValue) generatePasswordDto.Length = PasswordLength.Value;

        GeneratePassword();

        var localStoragePasswords = await LocalStorage.GetItemAsync<List<string>>("savedPasswords");

        if (localStoragePasswords is not null) savedPasswords = localStoragePasswords;

        await base.OnInitializedAsync();
    }

    private ValueTask SavePasswordAsync()
    {
        ToastService.ShowSuccess("The selected password was successfully saved.");

        if (savedPasswords.Any(x => x == password)) return ValueTask.CompletedTask;

        savedPasswords.Add(password);

        return LocalStorage.SetItemAsync("savedPasswords", savedPasswords);
    }

    private void ClearSavedPassword()
    {
        savedPasswords.Clear();

    }

    private ValueTask CopyToClipBoardAsync()
    {
        ToastService.ShowSuccess(message: "password copied");
        return JsRuntime.InvokeVoidAsync(identifier: "navigator.clipboard.writeText", password);
    }

    private void GeneratePassword()
    {
        password = passwordGenerator.Generate(generatePasswordDto);
        if (tracker == -1) visibilityState = "deactiveButton";
        else
        {
            visibilityState = "activeButton";
        }

        MementoTracker();



        //savedPasswords.Add(password);
    }

    private void OnInputChange(ChangeEventArgs args)
    {
        generatePasswordDto.Length = Convert.ToInt32(args.Value);

        password = passwordGenerator.Generate(generatePasswordDto);

        //test = "--Test--";

        MementoTracker();

        visibilityState = "activeButton";


        CssColourClass = GetCssColorClass(password.Length);
    }

    private string GetCssColorClass(int length)
    {
        switch (length)
        {
            case var value when (value >= 6 && value <= 12):
                return "bg-danger";


            case var value when (value > 12 && value <= 19):
                return "bg-warning";


            case var value when (value > 19 && value<=40):
                return "bg-success";
            default:
                throw new Exception(message: "Beklenmedik bir şifre uzunluğu geldi");
                break;
        }
    }

    private void CheckboxOnChange(ChangeEventArgs args, string checkBoxName)
    {
        switch (checkBoxName)
        {
            case "numbers":
                generatePasswordDto.IncludeNumbers = Convert.ToBoolean(args.Value);
                break;

            case "lowercaseChars":
                generatePasswordDto.IncludeLowercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "uppercaseChars":
                generatePasswordDto.IncludeUppercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "specialChars":
                generatePasswordDto.IncludeSpecialCharacters = Convert.ToBoolean(args.Value);
                break;

            default:
                throw new Exception("Beklenmedik bir Checkbox adı geldi.");
                break;

        }

        password = passwordGenerator.Generate(generatePasswordDto);
    }

    public void MementoTracker()
    {
        //Memento pattern kod bloğu//////////////////////////////////////////
        CareTaker.Memento = passwordGenerator.Save();
        storageForPasswords.Add(passwordGenerator.undo(CareTaker.Memento));
        tracker = storageForPasswords.Count-1;
        /////////////////////////////////////////////////////////////////////
    }

    public void UndoPassword()
    {
        if(tracker > 0)
        {

            ToastService.ShowWarning("tıklandı");

            if (storageForPasswords.Count>=2)
            {
                password = storageForPasswords[tracker-1];
                tracker--;
                if (tracker == 0) visibilityState = "deactiveButton";
                //test = "";
            }

        }
        else
        {
            visibilityState = "deactiveButton";
        }

        
    }
}
<style>
    body {
        background: #393E46
    }

    .activeButton{
        border: none;
        background-color: transparent;
    }

    .deactiveButton{
        border:none;
        background-color:transparent;
        opacity:0.5;
    }


</style>